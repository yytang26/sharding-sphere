server.port=8080



###配置分片策略

#### 水平分表配置
## sharding-jdbc 水平分表策略
## 配置数据源，给数据源起别名
#spring.shardingsphere.datasource.names=m1
## 一个实体类对应两张表，覆盖
#spring.main.allow-bean-definition-overriding=true
## 配置数据源的具体内容，包含连接池，驱动，地址，用户名，密码
#spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/sharding?serverTimezone=GMT%2B8
#spring.shardingsphere.datasource.m1.username=root
#spring.shardingsphere.datasource.m1.password=123456
## 指定course表分布的情况，配置表在哪个数据库里，表的名称都是什么 m1.course_1,m1.course_2
#spring.shardingsphere.sharding.tables.course.actual-data-nodes=m1.course_$->{1..2}
## 指定 course 表里面主键 cid 的生成策略 SNOWFLAKE
#spring.shardingsphere.sharding.tables.course.key-generator.column=cid
#spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE
## 配置分表策略    约定 cid 值偶数添加到 course_1 表，如果 cid 是奇数添加到 course_2 表
#spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=cid
#spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$->{cid % 2 + 1}
## 打开 sql 输出日志
#spring.shardingsphere.props.sql.show=true


#### 水平分库配置
## sharding-jdbc 水平分库分表策略
## 配置数据源，给数据源起别名
## 水平分库需要配置多个数据库
#spring.shardingsphere.datasource.names=m1,m2
#
## 一个实体类对应两张表，覆盖
#spring.main.allow-bean-definition-overriding=true
#
## 配置第一个数据源的具体内容，包含连接池，驱动，地址，用户名，密码
#spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/edu_db_1?serverTimezone=GMT%2B8
#spring.shardingsphere.datasource.m1.username=root
#spring.shardingsphere.datasource.m1.password=123456
#
## 配置第二个数据源的具体内容，包含连接池，驱动，地址，用户名，密码
#spring.shardingsphere.datasource.m2.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.m2.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.m2.url=jdbc:mysql://localhost:3306/edu_db_2?serverTimezone=GMT%2B8
#spring.shardingsphere.datasource.m2.username=root
#spring.shardingsphere.datasource.m2.password=123456
#
## 指定数据库分布的情况和数据表分布的情况
## m1 m2   course_1 course_2
#spring.shardingsphere.sharding.tables.course.actual-data-nodes=m$->{1..2}.course_$->{1..2}
#
## 指定 course 表里面主键 cid 的生成策略 SNOWFLAKE
#spring.shardingsphere.sharding.tables.course.key-generator.column=cid
#spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE
#
## 指定分库策略    约定 user_id 值偶数添加到 m1 库，如果 user_id 是奇数添加到 m2 库
## 默认写法（所有的表的user_id）
##spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
##spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=m$->{user_id % 2 + 1}
## 指定只有course表的user_id
#spring.shardingsphere.sharding.tables.course.database-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.tables.course.database-strategy.inline.algorithm-expression=m$->{user_id % 2 + 1}
#
## 指定分表策略    约定 cid 值偶数添加到 course_1 表，如果 cid 是奇数添加到 course_2 表
#spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=cid
#spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$->{cid % 2 + 1}
#
## 打开 sql 输出日志
#spring.shardingsphere.props.sql.show=true


#### 垂直分库配置
## sharding-jdbc 水平分库分表策略
## 配置数据源，给数据源起别名
## 水平分库需要配置多个数据库
## m0为用户数据库
#spring.shardingsphere.datasource.names=m1,m2,m0
#
## 一个实体类对应两张表，覆盖
#spring.main.allow-bean-definition-overriding=true
#
## 配置第一个数据源的具体内容，包含连接池，驱动，地址，用户名，密码
#spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/edu_db_1?serverTimezone=GMT%2B8
#spring.shardingsphere.datasource.m1.username=root
#spring.shardingsphere.datasource.m1.password=123456
#
## 配置第二个数据源的具体内容，包含连接池，驱动，地址，用户名，密码
#spring.shardingsphere.datasource.m2.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.m2.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.m2.url=jdbc:mysql://localhost:3306/edu_db_2?serverTimezone=GMT%2B8
#spring.shardingsphere.datasource.m2.username=root
#spring.shardingsphere.datasource.m2.password=123456
#
## 配置user数据源的具体内容，包含连接池，驱动，地址，用户名，密码
#spring.shardingsphere.datasource.m0.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.m0.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.m0.url=jdbc:mysql://localhost:3306/user_db?serverTimezone=GMT%2B8
#spring.shardingsphere.datasource.m0.username=root
#spring.shardingsphere.datasource.m0.password=123456
## 配置user_db数据库里面t_user  专库专表
#spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=m0.t_user
## 配置主键的生成策略
#spring.shardingsphere.sharding.tables.t_user.key-generator.column=user_id
#spring.shardingsphere.sharding.tables.t_user.key-generator.type=SNOWFLAKE
## 指定分表策略
#spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user
#
## 指定数据库分布的情况和数据表分布的情况
## m1 m2   course_1 course_2
#spring.shardingsphere.sharding.tables.course.actual-data-nodes=m$->{1..2}.course_$->{1..2}
#
## 指定 course 表里面主键 cid 的生成策略 SNOWFLAKE
#spring.shardingsphere.sharding.tables.course.key-generator.column=cid
#spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE
#
## 指定分库策略    约定 user_id 值偶数添加到 m1 库，如果 user_id 是奇数添加到 m2 库
## 默认写法（所有的表的user_id）
##spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
##spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=m$->{user_id % 2 + 1}
## 指定只有course表的user_id
#spring.shardingsphere.sharding.tables.course.database-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.tables.course.database-strategy.inline.algorithm-expression=m$->{user_id % 2 + 1}
#
## 指定分表策略    约定 cid 值偶数添加到 course_1 表，如果 cid 是奇数添加到 course_2 表
#spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=cid
#spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$->{cid % 2 + 1}
#
## 打开 sql 输出日志
#spring.shardingsphere.props.sql.show=true


#### 公共表配置
# sharding-jdbc 水平分库分表策略
# 配置数据源，给数据源起别名
# 水平分库需要配置多个数据库
# m0为用户数据库
spring.shardingsphere.datasource.names=m1,m2,m0

# 一个实体类对应两张表，覆盖
spring.main.allow-bean-definition-overriding=true

# 配置第一个数据源的具体内容，包含连接池，驱动，地址，用户名，密码
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/edu_db_1?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=123456

# 配置第二个数据源的具体内容，包含连接池，驱动，地址，用户名，密码
spring.shardingsphere.datasource.m2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m2.url=jdbc:mysql://localhost:3306/edu_db_2?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m2.username=root
spring.shardingsphere.datasource.m2.password=123456

# 配置user数据源的具体内容，包含连接池，驱动，地址，用户名，密码
spring.shardingsphere.datasource.m0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m0.url=jdbc:mysql://localhost:3306/user_db?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m0.username=root
spring.shardingsphere.datasource.m0.password=123456
# 配置user_db数据库里面t_user  专库专表
spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=m0.t_user
# 配置主键的生成策略
spring.shardingsphere.sharding.tables.t_user.key-generator.column=user_id
spring.shardingsphere.sharding.tables.t_user.key-generator.type=SNOWFLAKE
# 指定分表策略
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user

# 指定数据库分布的情况和数据表分布的情况
# m1 m2   course_1 course_2
spring.shardingsphere.sharding.tables.course.actual-data-nodes=m$->{1..2}.course_$->{1..2}

# 指定 course 表里面主键 cid 的生成策略 SNOWFLAKE
spring.shardingsphere.sharding.tables.course.key-generator.column=cid
spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE

# 指定分库策略    约定 user_id 值偶数添加到 m1 库，如果 user_id 是奇数添加到 m2 库
spring.shardingsphere.sharding.tables.course.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.course.database-strategy.inline.algorithm-expression=m$->{user_id % 2 + 1}

# 指定分表策略    约定 cid 值偶数添加到 course_1 表，如果 cid 是奇数添加到 course_2 表
spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=cid
spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$->{cid % 2 + 1}

# 公共表配置
spring.shardingsphere.sharding.broadcast-tables=t_dict
# 配置主键的生成策略
spring.shardingsphere.sharding.tables.t_dict.key-generator.column=dict_id
spring.shardingsphere.sharding.tables.t_dict.key-generator.type=SNOWFLAKE

# 打开 sql 输出日志
spring.shardingsphere.props.sql.show=true
